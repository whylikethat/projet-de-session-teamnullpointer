plugins {
  id 'java'
  id 'jacoco'
  id 'pmd'
  id 'checkstyle'
  id 'antlr'
  id 'maven-publish'
}


sourceCompatibility = '1.11'
targetCompatibility = '1.11'

generateGrammarSource {
  arguments += ['-visitor', '-no-listener']
}

repositories {
  mavenCentral()
}

test {
  useJUnitPlatform()
}

jar {
  manifest {
    attributes 'Main-Class': 'minischeme.Application'
  }
}

task uberJar(type: Jar) {
  baseName = 'minischeme'
  manifest {
    attributes 'Main-Class': 'minischeme.Application'
  }
  from sourceSets.main.output
  dependsOn configurations.runtimeClasspath
  from {
    configurations.runtimeClasspath
      .findAll { it.name.endsWith('jar') }
      .collect { zipTree(it) }
  }
}

jacocoTestReport {
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = true
    }
}

test.finalizedBy jacocoTestReport

compileJava.finalizedBy pmdMain
compileJava.finalizedBy checkstyleMain
compileTestJava.finalizedBy pmdTest
compileTestJava.finalizedBy checkstyleTest
build.finalizedBy uberJar
build.finalizedBy javadoc

pmd {
  ignoreFailures = true
}

checkstyle {
    toolVersion = "7.6.1"
    ignoreFailures = true
}

dependencies {
  antlr 'org.antlr:antlr4:4.7'
  testImplementation('org.junit.jupiter:junit-jupiter-api:5.3.1')
  testImplementation('org.junit.jupiter:junit-jupiter-params:5.3.1')
  testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.3.1')
  testRuntimeOnly('org.junit.platform:junit-platform-console:1.3.2')
  compile('commons-lang:commons-lang:2.0')
  compile group: 'org.antlr', name: 'antlr4-runtime', version: '4.7'
  compile('org.junit.jupiter:junit-jupiter-engine:5.3.1')
}

task junitConsole(type: JavaExec) {
  dependsOn testClasses
  classpath sourceSets.test.runtimeClasspath
  main 'org.junit.platform.console.ConsoleLauncher'
  args '--scan-classpath'
}

publishing {
  publications {
    maven(MavenPublication) {
      groupId = 'ca.uqam.inf2050.minischeme'
      artifactId = 'parser'
      version = '1.1'

      from components.java
    }
  }
}
